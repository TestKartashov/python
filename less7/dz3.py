# 3Реализовать программу работы с органическими клетками,
# состоящими из ячеек. Необходимо создать класс Клетка. В его конструкторе
# инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и
# целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно
# равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек
# двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение
# количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному
# аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: *****\n*****\n*****.

class Cell:

    def make_order(self, count_row: int):
        l = []
        t_count = self.count_cell // count_row + 1
        t_cell = self.count_cell
        for el in range(1, (t_count + 1)):
            if t_cell > 0:
                if t_cell > count_row:
                    l.append(f"{'*' * count_row}")
                else:
                    l.append(f"{'*' * t_cell}")
                t_cell -= count_row
        return '\n'.join(l)

    def __init__(self, count_cell: int):
        self.count_cell = count_cell

    def __add__(self, other: 'Cell'):
        return Cell(self.count_cell + other.count_cell)

    def __sub__(self, other: 'Cell'):
        t = self.count_cell - other.count_cell
        if t > 0:
            return Cell(t)
        else:
            raise Exception("Число меньше 0")

    def __mul__(self, other: 'Cell'):
        return Cell(self.count_cell * other.count_cell)

    def __truediv__(self, other: 'Cell'):
        return Cell(self.count_cell // other.count_cell)

    def __str__(self):
        return f"Количество клеток: {self.count_cell}"


cell_1 = Cell(12)
print(cell_1.make_order(5))

cell_2 = Cell(15)
print(cell_2.make_order(5))

print('Sum: ',cell_2 + cell_1)

print('Sub: ', cell_2 - cell_1)

print('Del: ', cell_1 / cell_2)

print('Mul: ', cell_1 * cell_2)

print('Error sUB', cell_1 - cell_2)
